{"version":3,"sources":["queries/queries.js","components/movie.component.jsx","components/addMovie.js","App.jsx","reportWebVitals.js","index.js"],"names":["getMoviesQuery","gql","getGenresQuery","Movie","useQuery","loading","error","data","movies","map","movie","title","id","displayGenres","disabled","genres","genre","value","AddMovie","useState","setTitle","setGenre","description","setDescription","onSubmit","e","preventDefault","console","log","className","type","onChange","target","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAEMA,EAAiBC,YAAH,kHAWdC,EAAiBD,YAAH,kF,OCCLE,EAXD,WACZ,MAAiCC,YAASJ,GAAlCK,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAExB,OAAIF,EAAgB,4CAChBC,EAAc,qDAEXC,EAAKC,OAAOC,KAAI,SAACC,GACtB,OAAO,6BAAoBA,EAAMC,OAAjBD,EAAME,Q,QCNpBC,EAAgB,SAACR,EAASE,GAC9B,OAAIF,EACK,wBAAQS,UAAQ,EAAhB,4BAEAP,EAAKQ,OAAON,KAAI,SAACO,GACtB,OACE,wBAAuBC,MAAOD,EAAMJ,GAApC,SACGI,EAAMA,OADIA,EAAMJ,QAkDZM,EA1CE,WACf,MAA0BC,mBAAS,IAAnC,mBAAOR,EAAP,KAAcS,EAAd,KACA,EAA0BD,mBAAS,IAAnC,mBAAOH,EAAP,KAAcK,EAAd,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA0BnB,YAASF,GAA3BG,EAAR,EAAQA,QAASE,EAAjB,EAAiBA,KAQjB,OACE,uBAAMK,GAAG,YAAYY,SANF,SAACC,GACpBA,EAAEC,iBACFC,QAAQC,IAAIjB,EAAOK,EAAOM,IAI1B,UACE,sBAAKO,UAAU,QAAf,UACE,gDACA,uBACEC,KAAK,OACLb,MAAON,EACPoB,SAAU,SAACN,GAAD,OAAOL,EAASK,EAAEO,OAAOf,aAGvC,sBAAKY,UAAU,QAAf,UACE,gDACA,uBACEC,KAAK,OACLb,MAAOK,EACPS,SAAU,SAACN,GAAD,OAAOF,EAAeE,EAAEO,OAAOf,aAG7C,sBAAKY,UAAU,QAAf,UACE,2CACA,yBAAQZ,MAAOD,EAAOe,SAAU,SAACN,GAAD,OAAOJ,EAASI,EAAEO,OAAOf,QAAzD,UACE,kDACCJ,EAAcR,EAASE,SAG5B,2CC/CA0B,EAAS,IAAIC,IAAa,CAC9BC,IAAK,WACLC,MAAO,IAAIC,MAiBEC,MAdf,WACE,OACE,cAACC,EAAA,EAAD,CAAgBN,OAAQA,EAAxB,SACE,sBAAKJ,UAAU,YAAf,UACE,oBAAIjB,GAAG,cAAP,8CACA,sBAAKiB,UAAU,kBAAf,UACA,cAAC,EAAD,IACA,cAAC,EAAD,aCROW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c6dd3653.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nconst getMoviesQuery = gql`\r\n  {\r\n    movies {\r\n      title\r\n      genre\r\n      description\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getGenresQuery = gql`\r\n  {\r\n    genres {\r\n      genre\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport { getMoviesQuery, getGenresQuery };\r\n","import { useQuery } from \"@apollo/client\";\r\nimport { getMoviesQuery } from \"../queries/queries\";\r\n\r\nconst Movie = () => {\r\n  const { loading, error, data } = useQuery(getMoviesQuery);\r\n  // console.log(data);\r\n  if (loading) return <p>Loading....</p>;\r\n  if (error) return <p>Something Went Wrong</p>;\r\n\r\n  return data.movies.map((movie) => {\r\n    return <li key={movie.id}>{movie.title}</li>;\r\n  });\r\n};\r\n\r\nexport default Movie;\r\n","import React, { useState } from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { getGenresQuery } from \"../queries/queries\";\r\n\r\nconst displayGenres = (loading, data) => {\r\n  if (loading) {\r\n    return <option disabled>Loading genres</option>;\r\n  } else {\r\n    return data.genres.map((genre) => {\r\n      return (\r\n        <option key={genre.id} value={genre.id}>\r\n          {genre.genre}\r\n        </option>\r\n      );\r\n    });\r\n  }\r\n};\r\n\r\nconst AddMovie = () => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [genre, setGenre] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const { loading, data } = useQuery(getGenresQuery);\r\n  // console.log(data);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(title, genre, description);\r\n  };\r\n\r\n  return (\r\n    <form id=\"add-title\" onSubmit={handleSubmit}>\r\n      <div className=\"field\">\r\n        <label>Movie Name:</label>\r\n        <input\r\n          type=\"text\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"field\">\r\n        <label>Description</label>\r\n        <input\r\n          type=\"text\"\r\n          value={description}\r\n          onChange={(e) => setDescription(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"field\">\r\n        <label>Genre:</label>\r\n        <select value={genre} onChange={(e) => setGenre(e.target.value)}>\r\n          <option>Select Genre</option>\r\n          {displayGenres(loading, data)}\r\n        </select>\r\n      </div>\r\n      <button>+</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddMovie;\r\n","import \"./App.css\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\n\n// custom components\nimport Movie from \"./components/movie.component\";\nimport AddMovie from \"./components/addMovie\";\n\n// apollo client setup\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"container\">\n        <h1 id=\"headingText\">Abhishek Movie List ðŸŽ¥</h1>\n        <div className=\"movie-container\">\n        <Movie />\n        <AddMovie />\n        </div>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}